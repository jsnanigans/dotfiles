#!/usr/bin/env bash
# -- general -------------------------------------------------------------------

set -g default-terminal "tmux-256color" # Better color support
setw -g xterm-keys on
set -s escape-time 10                     # faster command sequences
set -sg repeat-time 600                   # increase repeat timeout
set -s focus-events on

set -g prefix C-b                         # Default tmux prefix
bind C-b send-prefix

set -q -g status-utf8 on                  # expect UTF-8 (tmux < 2.2)
setw -q -g utf8 on

set -g history-limit 5000                 # boost history

# edit configuration
bind e new-window -n "~/.tmux.conf.local" sh -c '${EDITOR:-vim} ~/.tmux.conf.local && tmux source ~/.tmux.conf && tmux display "~/.tmux.conf sourced"'

# reload configuration
bind r source-file ~/.tmux.conf \; display '~/.tmux.conf sourced'


# -- display -------------------------------------------------------------------

set -g base-index 1           # start windows numbering at 1
setw -g pane-base-index 1     # make pane numbering consistent with windows

setw -g automatic-rename off  # disable automatic rename to keep custom window names
set -g renumber-windows on    # renumber windows when a window is closed

set -g set-titles on          # set terminal title

set -g display-panes-time 800 # slightly longer pane indicators display time
set -g display-time 1000      # slightly longer status messages display time

set -g status-interval 10     # redraw status line every 10 seconds

# clear both screen and history
bind -n C-l send-keys C-l \; run 'sleep 0.2' \; clear-history

# activity
set -g monitor-activity off
set -g visual-activity off


# -- navigation ----------------------------------------------------------------

# create session
bind C-c new-session

# find session
bind C-f command-prompt -p find-session 'switch-client -t %%'

# session navigation
bind BTab switch-client -l  # move to last session

# split current window horizontally
bind - split-window -v -c "#{pane_current_path}"
# split current window vertically
bind _ split-window -h -c "#{pane_current_path}"

# pane navigation
bind -r h select-pane -L  # move left
bind -r j select-pane -D  # move down
bind -r k select-pane -U  # move up
bind -r l select-pane -R  # move right
bind > swap-pane -D       # swap current pane with the next one
bind < swap-pane -U       # swap current pane with the previous one

# maximize current pane
bind + run 'cut -c3- ~/.tmux.conf | sh -s _maximize_pane "#{session_name}" #D'

# pane resizing
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2

# window navigation
unbind n
unbind p
bind -r C-h previous-window # select previous window
bind -r C-l next-window     # select next window
bind Tab last-window        # move to last active window

# toggle mouse
bind m run "cut -c3- ~/.tmux.conf | sh -s _toggle_mouse"


# -- urlview -------------------------------------------------------------------

bind U run "cut -c3- ~/.tmux.conf | sh -s _urlview #{pane_id}"


# -- facebook pathpicker -------------------------------------------------------

bind F run "cut -c3- ~/.tmux.conf | sh -s _fpp #{pane_id} #{pane_current_path}"


# -- copy mode -----------------------------------------------------------------

bind Enter copy-mode # enter copy mode

bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi C-v send -X rectangle-toggle
bind -T copy-mode-vi y send -X copy-selection-and-cancel
bind -T copy-mode-vi Escape send -X cancel
bind -T copy-mode-vi H send -X start-of-line
bind -T copy-mode-vi L send -X end-of-line

# copy to X11 clipboard
if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xsel -i -b"'
if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'
# copy to macOS clipboard
if -b 'command -v pbcopy > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | pbcopy"'
if -b 'command -v reattach-to-user-namespace > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | reattach-to-user-namespace pbcopy"'
# copy to Windows clipboard
if -b 'command -v clip.exe > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | clip.exe"'
if -b '[ -c /dev/clipboard ]' 'bind y run -b "tmux save-buffer - > /dev/clipboard"'


# -- buffers -------------------------------------------------------------------

bind b list-buffers  # list paste buffers
bind p paste-buffer  # paste from the top paste buffer
bind P choose-buffer # choose which buffer to paste from


# -- user defined overrides ----------------------------------------------------

source -q ~/.tmux.conf.local


# -- 8< ------------------------------------------------------------------------

%if #{==:#{status},on}
set -g status on
set -g status-interval 5
set -g status-position top
set -g status-left-length 1000
set -g status-right-length 1000

# Status bar styling
set -g status-style "fg=#e0def4,bg=#191724"

# Status left
set -g status-left "#[fg=#191724,bg=#eb6f92,bold] #S #[fg=#eb6f92,bg=#1f1d2e,nobold]"

# Status right
set -g status-right "#[fg=#26233a,bg=#1f1d2e]#[fg=#e0def4,bg=#26233a] %Y-%m-%d  %H:%M #[fg=#31748f,bg=#26233a]#[fg=#191724,bg=#31748f] #h "

# Window status
set -g window-status-format "#[fg=#1f1d2e,bg=#191724]#[fg=#6e6a86] #I  #W [#{pane_current_command}] #[fg=#1f1d2e,bg=#191724]"
set -g window-status-current-format "#[fg=#191724,bg=#c4a7e7]#[fg=#191724,bg=#c4a7e7,bold] #I  #W [#{pane_current_command}] #[fg=#c4a7e7,bg=#191724]"

# Pane borders
set -g pane-border-style "fg=#403d52"
set -g pane-active-border-style "fg=#c4a7e7"

# Message styling
set -g message-style "fg=#e0def4,bg=#26233a"
set -g message-command-style "fg=#e0def4,bg=#26233a"

# Mode styling
set -g mode-style "fg=#191724,bg=#c4a7e7"

# Clock mode
set -g clock-mode-colour "#c4a7e7"
%endif

# -- 8< ------------------------------------------------------------------------

run 'cut -c3- ~/.tmux.conf | sh -s _apply_configuration'


# EOF
#
# # exit the script if any statement returns a non-true return value
# set -e
#
# unset GREP_OPTIONS
# export LC_NUMERIC=C
#
# if ! printf '' | sed -E 's///' 2>/dev/null; then
#   if printf '' | sed -r 's///' 2>/dev/null; then
#     sed () {
#       n=$#; while [ "$n" -gt 0 ]; do arg=$1; shift; case $arg in -E*) arg=-r${arg#-E};; esac; set -- "$@" "$arg"; n=$(( n - 1 )); done
#       command sed "$@"
#     }
#   fi
# fi
#
# __newline='
# '
#
# _uname_s=$(uname -s)
#
# _is_enabled() {
#   [ "$1" = "true" ] || [ "$1" = "yes" ] || [ "$1" = "enabled" ] || [ "$1" = "1" ]
# }
#
# _circled() {
#   circled_digits='⓪ ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳'
#   if [ "$1" -le 20 ] 2>/dev/null; then
#     i=$(( $1 + 1 ))
#     eval set -- "$circled_digits"
#     eval echo "\${$i}"
#   else
#     echo "$1"
#   fi
# }
#
# _decode_unicode_escapes() {
#   printf '%s' "$*" | perl -CS -pe 's/(\\u([0-9A-Fa-f]{1,4})|\\U([0-9A-Fa-f]{1,8}))/chr(hex($2.$3))/eg' 2>/dev/null
# }
#
# _maximize_pane() {
#   current_session=${1:-$(tmux display -p '#{session_name}')}
#   current_pane=${2:-$(tmux display -p '#{pane_id}')}
#
#   dead_panes=$(tmux list-panes -s -t "$current_session" -F '#{pane_dead} #{pane_id} #{pane_start_command}' | grep -E -o '^1 %.+maximized.+$' || true)
#   restore=$(echo "$dead_panes" | sed -n -E -e "s/^1 $current_pane .+maximized.+'(%[0-9]+)'$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t $current_pane/p"\
#                                            -e "s/^1 (%[0-9]+) .+maximized.+'$current_pane'$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t \1/p")
#
#   if [ -z "$restore" ]; then
#     [ "$(tmux list-panes -t "$current_session:" | wc -l | sed 's/^ *//g')" -eq 1 ] && tmux display "Can't maximize with only one pane" && return
#     info=$(tmux new-window -t "$current_session:" -F "#{session_name}:#{window_index}.#{pane_id}" -P "maximized... 2>/dev/null & tmux setw -t \"$current_session:\" remain-on-exit on; printf \"Pane has been maximized, press <prefix>+ to restore\n\"; printf '$current_pane'")
#     session_window=${info%.*}
#     new_pane=${info#*.}
#
#     retry=20
#     while [ "$("$TMUX_PROGRAM" -S "$TMUX_SOCKET" list-panes -t "$session_window" -F '#{session_name}:#{window_index}.#{pane_id} #{pane_dead}' 2>/dev/null)" != "$info 1" ] && [ "$retry" -ne 0 ]; do
#       sleep 0.1
#       retry=$((retry - 1))
#     done
#     if [ "$retry" -eq 0 ]; then
#       tmux display 'Unable to maximize pane'
#     fi
#
#     tmux setw -t "$session_window" remain-on-exit off \; swap-pane -s "$current_pane" -t "$new_pane"
#   else
#     $restore || tmux kill-pane
#   fi
# }
#
# _toggle_mouse() {
#   old=$(tmux show -gv mouse)
#   new=""
#
#   if [ "$old" = "on" ]; then
#     new="off"
#   else
#     new="on"
#   fi
#
#   tmux set -g mouse $new
# }
#
# _urlview() {
#   pane_id=$1
#   shift
#
#   tmux capture-pane -J -S - -E - -b "urlview-$pane_id" -t "$pane_id"
#   tmux split-window "'$TMUX_PROGRAM' -S '$TMUX_SOCKET' save-buffer -b 'urlview-$pane_id' - | urlview || true; '$TMUX_PROGRAM' -S '$TMUX_SOCKET' delete-buffer -b 'urlview-$pane_id'"
# }
#
# _fpp() {
#   pane_id=$1
#   pane_current_path=$2
#   shift 2
#
#   tmux capture-pane -J -S - -E - -b "fpp-$pane_id" -t "$pane_id"
#   tmux split-window -c "$pane_current_path" "'$TMUX_PROGRAM' -S '$TMUX_SOCKET' save-buffer -b 'fpp-$pane_id' - | PATH='$PATH' fpp || true; '$TMUX_PROGRAM' -S '$TMUX_SOCKET' delete-buffer -b 'fpp-$pane_id'"
# }
#
# _apply_configuration() {
#   window_status_bell=$(tmux show -gv window-status-bell-style | sed 's/^[a-z]*,//')
#   window_status_activity=$(tmux show -gv window-status-activity-style | sed 's/^[a-z]*,//')
#
#   # Quietly apply overrides
#   tmux_conf_theme_24b_colour=${tmux_conf_theme_24b_colour:-true}
#   tmux set -ga terminal-overrides ",*256col*:Tc" 2>/dev/null
#
#   # Enable focus events for terminals that support them
#   tmux set -g focus-events on 2>/dev/null
# }
#
# "$@"